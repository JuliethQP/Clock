{"version":3,"sources":["component/Reloj.jsx","serviceWorker.js","index.js"],"names":["Reloj","useState","counter","setCounter","s","m","time","setTime","interv","setInterv","setStatus","setSegundos","setMinutos","run","className","style","backgroundColor","type","onClick","setInterval","clearInterval","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gLA4GeA,G,MAvGD,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACTC,EADS,KACAC,EADA,OAEQF,mBAAS,CAAEG,EAAG,GAAIC,EAAG,KAF7B,mBAETC,EAFS,KAEHC,EAFG,OAGYN,qBAHZ,mBAGTO,EAHS,KAGDC,EAHC,OAIYR,mBAAS,GAJrB,mBAIDS,GAJC,WAKZC,EAAcL,EAAKF,EAAGQ,EAAaN,EAAKD,EAwBtCQ,EAAM,WAMR,OALoB,IAAhBF,IACAC,IACAD,EAAc,IAElBA,IACOJ,EAAQ,CAAEH,EAAGO,EAAaN,EAAGO,KAYxC,OACI,yBAAKE,UAAU,+DACdC,MAAO,CACJC,gBAAgB,SAIhB,yBAAKF,UAAU,8BAEX,yBAAKA,UAAU,+BACX,2DAA2BZ,IAE/B,4BAAQe,KAAK,SAASH,UAAU,2BAA2BI,QAhDtD,WAGb,OAFAf,EAAWD,EAAU,GACrBU,IACOL,EAAQ,CAAEH,EAAG,GAAIC,EAAGO,MA6CnB,aACA,4BAAQK,KAAK,SAASH,UAAU,sBAAsBI,QA3ChD,WAGd,OAFAf,EAAWD,EAAU,GACrBU,IACOL,EAAQ,CAAEH,EAAG,GAAIC,EAAGO,MAwCnB,cAGJ,6BACA,yBAAKE,UAAU,8BAGP,yBAAKA,UAAU,QACX,uCAAaR,EAAKD,EAAlB,SAGJ,yBAAKS,UAAU,IACX,wCAAcR,EAAKF,KAY/B,yBAAKU,UAAU,8BAIX,4BAAQG,KAAK,SAASH,UAAU,2BAA2BI,QAhEzD,WACVL,IACAH,EAAU,GACVD,EAAUU,YAAYN,EAAK,QA6DnB,UAEA,4BAAQI,KAAK,SAASH,UAAU,2BAA2BI,QApD1D,WACTE,cAAcZ,GACdE,EAAU,KAkDF,QAEA,4BAAQO,KAAK,SAASH,UAAU,2BAA2BI,QAlDzD,WAGV,OAFAE,cAAcZ,GACdE,EAAU,GACHH,EAAQ,CAAEH,EAAG,GAAIC,EAAG,OA+CnB,aCrFIgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACM,kBAAC,EAAD,OAGNC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e33b5eb5.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Countdown from 'react-countdown';\r\nimport '../index.css'\r\n\r\n\r\nconst Reloj = () => {\r\n    const [counter, setCounter] = useState(25);\r\n    const [time, setTime] = useState({ s: 60, m: 25 });\r\n    const [interv, setInterv] = useState();\r\n    const [status, setStatus] = useState(0);\r\n    var setSegundos = time.s, setMinutos = time.m;\r\n\r\n    //inicia 1\r\n    //stop 0\r\n\r\n\r\n    const Aumentar = () => {\r\n        setCounter(counter + 1);\r\n        setMinutos++;\r\n        return setTime({ s: 60, m: setMinutos });\r\n    }\r\n\r\n    const Disminuir = () => {\r\n        setCounter(counter - 1)\r\n        setMinutos--;\r\n        return setTime({ s: 60, m: setMinutos });\r\n\r\n    }\r\n\r\n    const start = () => {\r\n        run();\r\n        setStatus(1);\r\n        setInterv(setInterval(run, 1000));\r\n    };\r\n    const run = () => {\r\n        if (setSegundos === 0) {\r\n            setMinutos--;\r\n            setSegundos = 60;\r\n        }\r\n        setSegundos--;\r\n        return setTime({ s: setSegundos, m: setMinutos });\r\n\r\n    }\r\n    const stop = () => {\r\n        clearInterval(interv);\r\n        setStatus(2);\r\n    };\r\n    const reset = () => {\r\n        clearInterval(interv);\r\n        setStatus(0);\r\n        return setTime({ s: 60, m: 25 })\r\n    };\r\n    return (\r\n        <div className=\"container  justify-content-center align-item-center mt-5 p-3\"\r\n         style={{\r\n            backgroundColor:'pink'\r\n        }}>\r\n\r\n\r\n            <div className=\"row justify-content-center\">\r\n\r\n                <div className=\"mt-3 justify-content-center\">\r\n                    <p>Duranción de la sesión {counter}</p>\r\n                </div>\r\n                <button type=\"button\" className=\"btn btn-dark btn-sm mx-2\" onClick={Aumentar}>Aumentar </button>\r\n                <button type=\"button\" className=\"btn btn-dark btn-sm\" onClick={Disminuir}>Disminuir</button>\r\n\r\n            </div>\r\n            <br />\r\n            <div className=\"row justify-content-center\" >\r\n               \r\n                 \r\n                    <div className=\"mx-2\">\r\n                        <p>Minutos: {time.m} ,  </p>\r\n\r\n                    </div>\r\n                    <div className=\"\">\r\n                        <p>Segundos: {time.s}</p>\r\n\r\n                    </div>\r\n\r\n               \r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n\r\n            <div className=\"row justify-content-center\">\r\n\r\n\r\n\r\n                <button type=\"button\" className=\"btn btn-dark btn-sm mx-2\" onClick={start}> Play </button>\r\n\r\n                <button type=\"button\" className=\"btn btn-dark btn-sm mx-2\" onClick={stop}>Stop</button>\r\n\r\n                <button type=\"button\" className=\"btn btn-dark btn-sm mx-2\" onClick={reset}>Reset</button>\r\n\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Reloj;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Reloj from './component/Reloj'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n        <Reloj />\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}